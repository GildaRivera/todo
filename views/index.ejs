<!DOCTYPE html>
<html lang="en" class="h-100">

<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta name="description" content="" />
  <meta name="author" content="JD" />
  <title>DSU Chat</title>

  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.3/css/bulma.min.css">

  <style>
    img {
      max-height: 60vh;
      height: auto;
      width: auto;
    }

    button:focus {
      border-width: 0px !important;
    }

    .input1 {
      box-shadow: none !important;
      background-color: #fff !important;
      border-color: #dbdbdb !important;
      border-radius: 4px !important;
      color: #363636 !important;
      border-width: 0;
    }

    .body {
      height: 100vh !important;
      background-color: #ffaa00;
      background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='100%25' height='100%25' viewBox='0 0 1600 800'%3E%3Cg %3E%3Cpath fill='%23ffb100' d='M486 705.8c-109.3-21.8-223.4-32.2-335.3-19.4C99.5 692.1 49 703 0 719.8V800h843.8c-115.9-33.2-230.8-68.1-347.6-92.2C492.8 707.1 489.4 706.5 486 705.8z'/%3E%3Cpath fill='%23ffb800' d='M1600 0H0v719.8c49-16.8 99.5-27.8 150.7-33.5c111.9-12.7 226-2.4 335.3 19.4c3.4 0.7 6.8 1.4 10.2 2c116.8 24 231.7 59 347.6 92.2H1600V0z'/%3E%3Cpath fill='%23ffbe00' d='M478.4 581c3.2 0.8 6.4 1.7 9.5 2.5c196.2 52.5 388.7 133.5 593.5 176.6c174.2 36.6 349.5 29.2 518.6-10.2V0H0v574.9c52.3-17.6 106.5-27.7 161.1-30.9C268.4 537.4 375.7 554.2 478.4 581z'/%3E%3Cpath fill='%23ffc500' d='M0 0v429.4c55.6-18.4 113.5-27.3 171.4-27.7c102.8-0.8 203.2 22.7 299.3 54.5c3 1 5.9 2 8.9 3c183.6 62 365.7 146.1 562.4 192.1c186.7 43.7 376.3 34.4 557.9-12.6V0H0z'/%3E%3Cpath fill='%23ffcc00' d='M181.8 259.4c98.2 6 191.9 35.2 281.3 72.1c2.8 1.1 5.5 2.3 8.3 3.4c171 71.6 342.7 158.5 531.3 207.7c198.8 51.8 403.4 40.8 597.3-14.8V0H0v283.2C59 263.6 120.6 255.7 181.8 259.4z'/%3E%3Cpath fill='%23ffd914' d='M1600 0H0v136.3c62.3-20.9 127.7-27.5 192.2-19.2c93.6 12.1 180.5 47.7 263.3 89.6c2.6 1.3 5.1 2.6 7.7 3.9c158.4 81.1 319.7 170.9 500.3 223.2c210.5 61 430.8 49 636.6-16.6V0z'/%3E%3Cpath fill='%23ffe529' d='M454.9 86.3C600.7 177 751.6 269.3 924.1 325c208.6 67.4 431.3 60.8 637.9-5.3c12.8-4.1 25.4-8.4 38.1-12.9V0H288.1c56 21.3 108.7 50.6 159.7 82C450.2 83.4 452.5 84.9 454.9 86.3z'/%3E%3Cpath fill='%23ffef3d' d='M1600 0H498c118.1 85.8 243.5 164.5 386.8 216.2c191.8 69.2 400 74.7 595 21.1c40.8-11.2 81.1-25.2 120.3-41.7V0z'/%3E%3Cpath fill='%23fff852' d='M1397.5 154.8c47.2-10.6 93.6-25.3 138.6-43.8c21.7-8.9 43-18.8 63.9-29.5V0H643.4c62.9 41.7 129.7 78.2 202.1 107.4C1020.4 178.1 1214.2 196.1 1397.5 154.8z'/%3E%3Cpath fill='%23ffff66' d='M1315.3 72.4c75.3-12.6 148.9-37.1 216.8-72.4h-723C966.8 71 1144.7 101 1315.3 72.4z'/%3E%3C/g%3E%3C/svg%3E");
      background-attachment: fixed;
      background-size: cover;
    }

    .carousel-control-prev,
    .carousel-control-next {
      max-height: 75%;
    }
  </style>
</head>

<body class="body" style="">


  <div class="container is-max-desktop">

    <div class="notification is-primary" style="position: relative; top:10vh; background-color: #e6820966;">
      <h1 class="subtitle is-1" style="text-align: center; ">TO DO LIST</h1>
      <%- include('./form'); %>

        <div class="table-container" style="position: relative; top:2vh; margin-bottom: 2vh;">
          <table class="table is-hoverable is-fullwidth">
            <thead>

              <tr>

                <th>Task</th>

                <th>Actions</th>

              </tr>
            </thead>

            <tbody id="body">



            </tbody>

          </table>





        </div>

    </div>
  </div>
  <script src="http://ajax.googleapis.com/ajax/libs/jquery/2.0.0/jquery.min.js"></script>
  <script>
    async function onGet() {
      const rawResponse = await fetch(`http://localhost:3030/task`, {
        method: 'GET',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        },
      });
      const v = await rawResponse.json();
      let r = v.data.map(v => {
        let newe = JSON.stringify(v).replaceAll("\"", "\'")

        return `
       <tr class="${v.id}">
    <td>
      <div class="is-flex">
        <input type="checkbox" value="${v.status}"
        onchange="checkStatus(${newe})" id="${v.id}"
        ${v.status == 'closed' && ("checked")}
          onclick="onUpdate(${newe})" style="position: relative; top:2vh; " >
        <input class="input input1 " placeholder="${v.task}" value="${v.task}"
          style="position: relative; width: 90%; left: 1vw; ${v.status == 'closed' && ("text-decoration-line: line-through;")}" disabled="false" name=${v.id}
       
          >
        <div class="is-flex">
          <button class="button editIcons " $button-active-color="red" style="background-color: #fff0; border-width: 0px;"
          onclick="onTaskEdit(1,${newe})">
            <i class="fa-solid fa-check"></i></button>
          <button class="button  editIcons" style="background-color: #fff0; border-width: 0px;"
          onclick="onTaskEdit(2,${newe})">
            <i class="fa-solid fa-x"></i></button>
        </div>
      </div>
    </td>

    <td>

      <button class="button" style="background-color: #fff0; border-width: 0px;"
        onclick="onDelete(${v.id})">
        <i class="fa-solid fa-trash"></i></button>

      <button class="button " style="background-color: #fff0; border-width: 0px;"
        onclick="onEdit(${v.id})">
        <i class="fa-solid fa-pen"></i></button>



    </td>
  </tr>
`})
      data = v
      document.getElementById('body').innerHTML = r.join('')


    }
    async function onDelete(e) {
      const rawResponse = await fetch(`http://localhost:3030/home/${e}`, {
        method: 'DELETE',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        },
      });
      const content = await rawResponse.json();
      console.log(document.getElementsByClassName(e), e, typeof (e))
      let child = document.getElementsByClassName(e)[0]
      document.getElementById('body').removeChild(child)

    }
    function onEdit(e) {
      document.getElementsByName(e)[0].disabled = false
      document.getElementsByName(e)[0].className = "input is-primary"

    }
    async function onTaskEdit(action, element) {
      if (action == 1) {
        var task = document.getElementsByName(element.id)[0].value
        element.task = task

        const rawResponse = await fetch(`http://localhost:3030/home/${element.id}`, {
          method: 'PUT',
          headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ task: task, status: element.status })
        });
        const v = await rawResponse.json();

        let r = v.data.map(v => {
          let newe = JSON.stringify(v).replaceAll("\"", "\'")
          return `
       <tr class="${v.id}">
    <td>
      <div class="is-flex">
        <input type="checkbox" value="${v.status}"
        ${v.status == 'closed' && ("checked")}
        onchange="checkStatus(${newe})" id="${v.id}"
        onclick="onUpdate(${newe})"      style="position: relative; top:2vh">
        <input class="input input1 " placeholder="${v.task}" value="${v.task}"
        style="position: relative; width: 90%; left: 1vw; ${v.status == 'closed' && ("text-decoration-line: line-through;")}" disabled="false" name=${v.id}>
        <div class="is-flex">
          <button class="button editIcons " $button-active-color="red" style="background-color: #fff0; border-width: 0px;"
          onclick="onTaskEdit(1,${newe})">
            <i class="fa-solid fa-check"></i></button>
          <button class="button  editIcons" style="background-color: #fff0; border-width: 0px;"
          onclick="onTaskEdit(2,${newe})">
            <i class="fa-solid fa-x"></i></button>
        </div>
      </div>
    </td>

    <td>

      <button class="button" style="background-color: #fff0; border-width: 0px;"
        onclick="onDelete(${v.id})">
        <i class="fa-solid fa-trash"></i></button>

      <button class="button " style="background-color: #fff0; border-width: 0px;"
        onclick="onEdit(${v.id})">
        <i class="fa-solid fa-pen"></i></button>



    </td>
  </tr>
`})
        data = v
        document.getElementById('body').innerHTML = r.join('')





      } else {
        document.getElementsByName(element.id)[0].className = "input1 input"
        document.getElementsByName(element.id)[0].disabled = true
        document.getElementsByName(element.id)[0].value = element.task
      }

    }
    async function onUpdate(e) {
      console.log(e, 1)
      if (e.status == 'pending') {
        e.status = 'closed'
      } else {
        e.status = 'pending'
      }

      const rawResponse = await fetch(`http://localhost:3030/home/${e.id}`, {
        method: 'PUT',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ task: e.task, status: e.status })
      });
      const v = await rawResponse.json();

      let r = v.data.map(v => {
        let newe = JSON.stringify(v).replaceAll("\"", "\'")
        return `
       <tr class="${v.id}">
    <td>
      <div class="is-flex">
        <input type="checkbox" value="${v.status}"
        onchange="checkStatus(${newe})" id="${v.id}"
        ${v.status == 'closed' && ("checked")}
        onclick="onUpdate(${newe})"      style="position: relative; top:2vh">
        <input class="input input1 " placeholder="${v.task}" value="${v.task}"
        style="position: relative; width: 90%; left: 1vw; ${v.status == 'closed' && ("text-decoration-line: line-through;")}" disabled="false" name=${v.id}>
        <div class="is-flex">
          <button class="button editIcons " $button-active-color="red" style="background-color: #fff0; border-width: 0px;"
          onclick="onTaskEdit(1,${newe})">
            <i class="fa-solid fa-check"></i></button>
          <button class="button  editIcons" style="background-color: #fff0; border-width: 0px;"
          onclick="onTaskEdit(2,${newe})">
            <i class="fa-solid fa-x"></i></button>
        </div>
      </div>
    </td>

    <td>

      <button class="button" style="background-color: #fff0; border-width: 0px;"
        onclick="onDelete(${v.id})">
        <i class="fa-solid fa-trash"></i></button>

      <button class="button " style="background-color: #fff0; border-width: 0px;"
        onclick="onEdit(${v.id})">
        <i class="fa-solid fa-pen"></i></button>



    </td>
  </tr>
`})
      data = v
      document.getElementById('body').innerHTML = r.join('')





    }

    function checkStatus(e) {
      console.log(e)
      if (e.status == 'closed') {
        document.getElementById(e.id).setChecked = true
        document.getElementsByName(e.id)[0].style.textDecorationLine = 'blink'

      } else {
        document.getElementsByName(e.id)[0].style.textDecorationLine = 'line-through'
        document.getElementById(e.id).setChecked = false

      }
    }
    async function add(e) {

      var task = document.getElementsByName("task")[0].value
      const rawResponse = await fetch(`http://localhost:3030/home`, {
        method: 'POST',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ task: task })
      });
      const v = await rawResponse.json();

      let r = v.data.map(v => {
        let newe = JSON.stringify(v).replaceAll("\"", "\'")

        return `
       <tr class="${v.id}">
    <td>
      <div class="is-flex">
        <input type="checkbox" value="${v.status}"
        onchange="checkStatus(${newe})" id="${v.id}"
        ${v.status == 'closed' && ("checked")}
          onclick="onUpdate(${newe})" style="position: relative; top:2vh" >
        <input class="input input1 " placeholder="${v.task}" value="${v.task}"
        style="position: relative; width: 90%; left: 1vw; ${v.status == 'closed' && ("text-decoration-line: line-through;")}" disabled="false" name=${v.id}>
        <div class="is-flex">
          <button class="button editIcons " $button-active-color="red" style="background-color: #fff0; border-width: 0px;"
          onclick="onTaskEdit(1,${newe})">
            <i class="fa-solid fa-check"></i></button>
          <button class="button  editIcons" style="background-color: #fff0; border-width: 0px;"
          onclick="onTaskEdit(2,${newe})">
            <i class="fa-solid fa-x"></i></button>
        </div>
      </div>
    </td>

    <td>

      <button class="button" style="background-color: #fff0; border-width: 0px;"
        onclick="onDelete(${v.id})">
        <i class="fa-solid fa-trash"></i></button>

      <button class="button " style="background-color: #fff0; border-width: 0px;"
        onclick="onEdit(${v.id})">
        <i class="fa-solid fa-pen"></i></button>



    </td>
  </tr>
`})
      data = v
      document.getElementById('body').innerHTML = r.join('')

    document.getElementById('boton').value=""



    }
  </script>
  <script>
    $(document).ready(function () {


      onGet()



    });
  </script>


  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"
    integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p"
    crossorigin="anonymous"></script>


  <script src="https://kit.fontawesome.com/ea57e7377a.js" crossorigin="anonymous"></script>
</body>

</html>